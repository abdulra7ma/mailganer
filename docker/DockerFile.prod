# pull official base image
FROM python:2.7.18-slim-buster as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONFAULTHANDLER 1

RUN apt-get update \
    && apt-get install --yes --no-install-recommends gcc g++ libffi-dev python-dev\
    && apt-get autoremove --yes gcc g++ libffi-dev \
    && rm -rf /var/lib/apt/lists/*

# create the app user
RUN groupadd app && \
    useradd -rm -d /home/app -s /bin/bash -g app -G sudo -u 1001 app

# up
RUN pip install --upgrade pip

# install dependencies
COPY ./app/requirements.dev.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.dev.txt

# pull official base image
FROM python:2.7.18-slim-buster

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN groupadd app && \
    useradd -rm -d /home/app -s /bin/bash -g app -G sudo -u 1001 app

# create the appropriate directories
ENV APP_HOME=/var/www/mailganer
RUN mkdir -p $APP_HOME
WORKDIR $APP_HOME

# install dependencies
RUN apt update \
    && apt install --yes --no-install-recommends libpq-dev
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.dev.txt .
RUN pip install --no-cache /wheels/*

# copy project
COPY . $APP_HOME

# copy entrypoint.prod.sh
COPY ./scripts/deploy/entrypoint.prod.sh .
RUN chmod +x  $APP_HOME/scripts/deploy/entrypoint.prod.sh

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/var/www/mailganer/scripts/deploy/entrypoint.prod.sh"]
